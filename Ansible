#!/bin/bash
GCE_ini_py_prerequisites() {
    cat << EOF
#############################
Please ensure that you 
set the GCEZONE variable
so that it corresponds with your
zone
#############################
EOF

sleep 3

    cat << EOF
#############################
Please ensure that you 
set the export path to
the gce.ini file
i.e se the location of where the file is
before running the 
script or it will fail to initalise 
with gce.py
to exit the script to set the 
variables
press ctrl+c and vi into 
the Ansible file and 
then adjust the timmers as 
needed
#############################
EOF

sleep 10

}



GCE_ini_Config () {

    SERVICEACCOUNTEMAIL=$(cat account.json | grep email | sed 's/"//g' | sed 's/://' | sed 's/client_email//' | tr -d ' ' | tr -d ,)
    JASONFILELOCATION="account.json"
    PROJECTID=$(grep project account.json | sed 's/project_id//' | sed 's/"//g' | tr -d : | tr -d , | tr -d ' ')
    GCEZONE="us-central1-f"
    
    sed -i.bak 's/serviceaccount/'$SERVICEACCOUNTEMAIL'/' gce.ini
    sed -i 's/jasonfile/'$JASONFILELOCATION'/' gce.ini
    sed -i 's/projectid/'$PROJECTID'/' gce.ini
    sed -i 's/gcezone/'$GCEZONE'/' gce.ini
   sudo echo "export GCE_INI_PATH=~/Desktop/CICD/Ravelin_GCP_Project/gce.ini" >> ~/.bashrc
   source  . ~/.bashrc


   cat << EOF
#############################
Checking that gce.py dynamic
inventory script is working
#############################
EOF
./gce.py --list

   cat << EOF
#############################
Evaluating Connection to
google hosts
via dynamic inventory file
gce.py
#############################
EOF
ansible all -i gce.py -m setup
#http://docs.ansible.com/ansible/latest/setup_module.html
#explains that -m setup gathers facts about the machine
}


python_check () {
PYTHON_CHECK=$(which python)
if [ "$PYTHON_CHECK" ]; then

cat << EOF
#############################
Python binary appears to exist which
is needed to run the gce.py 
file
#############################
EOF

sleep 3

cat << EOF
#############################
Verifying python installation
#############################
EOF

python --version 
sleep 2 
python3 --version

cat << EOF
#############################
Setting Python 3 shebang
in gce.py
#############################
EOF
$PYTHON_CHECK
sed -i.bak '2i #!'$PYTHON_CHECK'' gce.py
sed -i '1d' gce.py

else
cat << EOF
#############################
Python binary doesn't appear
to exist which is needed 
to run the gce.py 
file for dynamic inventory
#############################
EOF

sleep 3

cat << EOF
#############################
installing Python and Python3
#############################
EOF
sudp apt update
sudo apt install python -y
sudo apt install python3 -y

cat << EOF
#############################
Setting Python 3 shebang
in gce.py
#############################
EOF
$PYTHON_CHECK
sed -i.bak '2i #!'$PYTHON_CHECK'' gce.py
sed -i '1d' gce.py
fi
}

ansible_GCE_plugin () {
#APACHE_CLOUD_BIN_CHECK=$(pip list | grep apache-libcloud)
#if [ "$APACHE_CLOUD_BIN_CHECK" ]; then
# pip install --upgrade apache-libcloud
#else
#fi
#may need the above for a later day for now its ok


cat << EOF
#############################
Installing apache-libcloud
if not already installed
#############################
EOF

sleep 2
sudo pip install apache-libcloud

cat << EOF
#############################
Verfiying that apache-libcloud
has been installed
#############################
EOF
sleep 2

pip list | grep apache-libcloud

GCE_ini_py_prerequisites

cat << EOF 
#######################################
Configuring gce.py and gce.ini
files to allow for dynamic management
of GCE VM's via ssh
#######################################
EOF

sleep 2

GCE_ini_Config
}

ansible_install_ubuntu () {
    sudo apt update
    sudo apt install  software-properties-common -y
    sudo apt-add-repository ppa:ansible/ansible
    sudo apt update
    sudo apt install ansible -y
}


pip_install () {
sudo apt update 
sudo apt install python-pip -y
}

pip_check_function () {
pip_check="$(which pip)"
if [ "$pip_check" ]; then

cat << EOF
#############################
pip appears to be installed as a binary 
has been located in $pip_check
#############################
EOF

sleep 2

cat << EOF
#############################
verifying installation
#############################
EOF

sleep 2
pip -V

cat << EOF
#############################
Upgrading pip version 
if less than latest
#############################
EOF

sleep 2
sudo pip install --upgrade pip
ansible_GCE_plugin
else

cat << EOF
#############################
pip does not appear to 
exist installing pip
#############################
EOF

sleep 3

pip_install

cat << EOF
#############################
verifying installation
#############################
EOF

sleep 2
pip -V
fi
}

ansible_location_installation_check () {
Ansible_check=$(which ansible)
if [ "$Ansible_check" ]; then

cat << EOF
#############################
Ansible exist
#############################
EOF

sleep 2

cat << EOF
#############################
verifying installation
#############################
EOF
sleep 2
ansible

cat << EOF
#############################
Proceeding to check if 
pip is installed
#############################
EOF

sleep 2
pip_check_function
sleep 2

cat << EOF
#############################
checking to see if python
is installed
#############################
EOF
sleep 2
python_check

else

cat << EOF
#############################
no ansible binary 
detected installing ansible
#############################
EOF

sleep 2
ansible_install_ubuntu
sleep 2

cat << EOF
#############################
checking to see if pip is installed
#############################
EOF
sleep 2
pip_check_function

cat << EOF
#############################
checking to see if python
is installed
#############################
EOF
sleep 2
python_check
fi
}


ansible_location_installation_check